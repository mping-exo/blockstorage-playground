// Code generated by protoc-gen-marshal-zap. DO NOT EDIT.
// source: rpc.pb.go

package proto

import (
	"go.uber.org/zap/zapcore"
	"strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = zapcore.NewNopCore
var _ = strconv.FormatInt

func (x *Blob) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddInt32("partition", x.Partition)

	enc.AddInt64("blob_id", x.BlobId)

	enc.AddInt32("size", x.Size)

	return nil
}

func (x *PartialBlob) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Blob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("blob", obj)
	} else {
		enc.AddReflected("blob", x.Blob)
	}

	enc.AddInt32("offset", x.Offset)

	enc.AddInt32("length", x.Length)

	return nil
}

func (x *Checksum) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("type", x.Type.String())

	enc.AddInt32("size", x.Size)

	enc.AddInt64("digest", x.Digest)

	return nil
}

func (x *GetChunk) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddBinary("data", x.Data)

	if obj, ok := interface{}(x.Checksum).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("checksum", obj)
	} else {
		enc.AddReflected("checksum", x.Checksum)
	}

	return nil
}

func (x *GetPartialChunk) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddBinary("data", x.Data)

	return nil
}

func (x *PutChunk) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddBinary("data", x.Data)

	if obj, ok := interface{}(x.Checksum).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("checksum", obj)
	} else {
		enc.AddReflected("checksum", x.Checksum)
	}

	if obj, ok := interface{}(x.Blob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("blob", obj)
	} else {
		enc.AddReflected("blob", x.Blob)
	}

	return nil
}

func (x *PutResult) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *DeleteResult) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *GetPartitionMetadataRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddInt32("partition", x.Partition)

	enc.AddInt64("offset", x.Offset)

	return nil
}

func (x *BlobMeta) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Blob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("blob", obj)
	} else {
		enc.AddReflected("blob", x.Blob)
	}

	enc.AddInt64("offset", x.Offset)

	enc.AddString("state", x.State.String())

	if obj, ok := interface{}(x.GetDtime()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("dtime", obj)
	} else {
		enc.AddReflected("dtime", x.GetDtime())
	}

	return nil
}

func (x *GetPartitionMetadataResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddInt64("offset", x.Offset)

	blobsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Blobs {

			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}

		}
		return nil
	}
	enc.AddArray("blobs", zapcore.ArrayMarshalerFunc(blobsArrMarshaller))

	return nil
}
