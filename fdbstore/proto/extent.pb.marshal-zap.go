// Code generated by protoc-gen-marshal-zap. DO NOT EDIT.
// source: extent.pb.go

package proto

import (
	"go.uber.org/zap/zapcore"
	"strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = zapcore.NewNopCore
var _ = strconv.FormatInt

func (x *RefCountedBlob) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Blob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("blob", obj)
	} else {
		enc.AddReflected("blob", x.Blob)
	}

	enc.AddInt32("refcount", x.Refcount)

	return nil
}

func (x *BlobView) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Blob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("blob", obj)
	} else {
		enc.AddReflected("blob", x.Blob)
	}

	enc.AddInt64("blobOffset", x.BlobOffset)

	enc.AddInt64("blobSize", x.BlobSize)

	enc.AddInt64("extentOffset", x.ExtentOffset)

	return nil
}

func (x *Extent) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("uuid", x.Uuid)

	enc.AddUint64("diskOffset", x.DiskOffset)

	blobsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Blobs {

			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}

		}
		return nil
	}
	enc.AddArray("blobs", zapcore.ArrayMarshalerFunc(blobsArrMarshaller))

	enc.AddBool("isSnapshot", x.IsSnapshot)

	return nil
}
