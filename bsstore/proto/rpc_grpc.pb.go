// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlobStoreClient is the client API for BlobStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobStoreClient interface {
	Put(ctx context.Context, opts ...grpc.CallOption) (BlobStore_PutClient, error)
	GetPartial(ctx context.Context, in *PartialBlob, opts ...grpc.CallOption) (BlobStore_GetPartialClient, error)
	Get(ctx context.Context, in *Blob, opts ...grpc.CallOption) (BlobStore_GetClient, error)
	Delete(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*DeleteResult, error)
	GetPartitionMetadata(ctx context.Context, in *GetPartitionMetadataRequest, opts ...grpc.CallOption) (*GetPartitionMetadataResponse, error)
}

type blobStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobStoreClient(cc grpc.ClientConnInterface) BlobStoreClient {
	return &blobStoreClient{cc}
}

func (c *blobStoreClient) Put(ctx context.Context, opts ...grpc.CallOption) (BlobStore_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[0], "/exoscale.sos.BlobStore/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStorePutClient{stream}
	return x, nil
}

type BlobStore_PutClient interface {
	Send(*PutChunk) error
	CloseAndRecv() (*PutResult, error)
	grpc.ClientStream
}

type blobStorePutClient struct {
	grpc.ClientStream
}

func (x *blobStorePutClient) Send(m *PutChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blobStorePutClient) CloseAndRecv() (*PutResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobStoreClient) GetPartial(ctx context.Context, in *PartialBlob, opts ...grpc.CallOption) (BlobStore_GetPartialClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[1], "/exoscale.sos.BlobStore/GetPartial", opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStoreGetPartialClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobStore_GetPartialClient interface {
	Recv() (*GetPartialChunk, error)
	grpc.ClientStream
}

type blobStoreGetPartialClient struct {
	grpc.ClientStream
}

func (x *blobStoreGetPartialClient) Recv() (*GetPartialChunk, error) {
	m := new(GetPartialChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobStoreClient) Get(ctx context.Context, in *Blob, opts ...grpc.CallOption) (BlobStore_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobStore_ServiceDesc.Streams[2], "/exoscale.sos.BlobStore/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &blobStoreGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobStore_GetClient interface {
	Recv() (*GetChunk, error)
	grpc.ClientStream
}

type blobStoreGetClient struct {
	grpc.ClientStream
}

func (x *blobStoreGetClient) Recv() (*GetChunk, error) {
	m := new(GetChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobStoreClient) Delete(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/exoscale.sos.BlobStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobStoreClient) GetPartitionMetadata(ctx context.Context, in *GetPartitionMetadataRequest, opts ...grpc.CallOption) (*GetPartitionMetadataResponse, error) {
	out := new(GetPartitionMetadataResponse)
	err := c.cc.Invoke(ctx, "/exoscale.sos.BlobStore/GetPartitionMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlobStoreServer is the server API for BlobStore service.
// All implementations must embed UnimplementedBlobStoreServer
// for forward compatibility
type BlobStoreServer interface {
	Put(BlobStore_PutServer) error
	GetPartial(*PartialBlob, BlobStore_GetPartialServer) error
	Get(*Blob, BlobStore_GetServer) error
	Delete(context.Context, *Blob) (*DeleteResult, error)
	GetPartitionMetadata(context.Context, *GetPartitionMetadataRequest) (*GetPartitionMetadataResponse, error)
	mustEmbedUnimplementedBlobStoreServer()
}

// UnimplementedBlobStoreServer must be embedded to have forward compatible implementations.
type UnimplementedBlobStoreServer struct {
}

func (UnimplementedBlobStoreServer) Put(BlobStore_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedBlobStoreServer) GetPartial(*PartialBlob, BlobStore_GetPartialServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPartial not implemented")
}
func (UnimplementedBlobStoreServer) Get(*Blob, BlobStore_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBlobStoreServer) Delete(context.Context, *Blob) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBlobStoreServer) GetPartitionMetadata(context.Context, *GetPartitionMetadataRequest) (*GetPartitionMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionMetadata not implemented")
}
func (UnimplementedBlobStoreServer) mustEmbedUnimplementedBlobStoreServer() {}

// UnsafeBlobStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobStoreServer will
// result in compilation errors.
type UnsafeBlobStoreServer interface {
	mustEmbedUnimplementedBlobStoreServer()
}

func RegisterBlobStoreServer(s grpc.ServiceRegistrar, srv BlobStoreServer) {
	s.RegisterService(&BlobStore_ServiceDesc, srv)
}

func _BlobStore_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlobStoreServer).Put(&blobStorePutServer{stream})
}

type BlobStore_PutServer interface {
	SendAndClose(*PutResult) error
	Recv() (*PutChunk, error)
	grpc.ServerStream
}

type blobStorePutServer struct {
	grpc.ServerStream
}

func (x *blobStorePutServer) SendAndClose(m *PutResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blobStorePutServer) Recv() (*PutChunk, error) {
	m := new(PutChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlobStore_GetPartial_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PartialBlob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobStoreServer).GetPartial(m, &blobStoreGetPartialServer{stream})
}

type BlobStore_GetPartialServer interface {
	Send(*GetPartialChunk) error
	grpc.ServerStream
}

type blobStoreGetPartialServer struct {
	grpc.ServerStream
}

func (x *blobStoreGetPartialServer) Send(m *GetPartialChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _BlobStore_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Blob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobStoreServer).Get(m, &blobStoreGetServer{stream})
}

type BlobStore_GetServer interface {
	Send(*GetChunk) error
	grpc.ServerStream
}

type blobStoreGetServer struct {
	grpc.ServerStream
}

func (x *blobStoreGetServer) Send(m *GetChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _BlobStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exoscale.sos.BlobStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobStoreServer).Delete(ctx, req.(*Blob))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobStore_GetPartitionMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobStoreServer).GetPartitionMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exoscale.sos.BlobStore/GetPartitionMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobStoreServer).GetPartitionMetadata(ctx, req.(*GetPartitionMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlobStore_ServiceDesc is the grpc.ServiceDesc for BlobStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exoscale.sos.BlobStore",
	HandlerType: (*BlobStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _BlobStore_Delete_Handler,
		},
		{
			MethodName: "GetPartitionMetadata",
			Handler:    _BlobStore_GetPartitionMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _BlobStore_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPartial",
			Handler:       _BlobStore_GetPartial_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _BlobStore_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
